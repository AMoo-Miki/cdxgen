name: Release AppImage and Exe

on:
  push:
    tags:
    - 'v*'

jobs:
  pkg-linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Produce pkg
      run: |
        sudo npm install -g pkg
        npm install
        pkg -t node14-linux package.json --out-path dist
    - name: Test pkg
      run: |
        chmod +x dist/cdxgen
        ./dist/cdxgen -v
        ./dist/cdxgen .
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cdxgen
        asset_name: cdxgen-linux
        asset_content_type: application/octet-stream

  pkg-win:
    needs: pkg-linux
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Produce pkg
      run: |
        sudo npm install -g pkg
        npm install
        pkg -t node14-win package.json --out-path dist
    - name: Test pkg
      run: |
        ./dist/cdxgen.exe -v
        ./dist/cdxgen.exe .
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset Win
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cdxgen.exe
        asset_name: cdxgen.exe
        asset_content_type: application/octet-stream

  pkg-mac:
    needs: pkg-linux
    runs-on: macos-11.0
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Produce pkg
      run: |
        sudo npm install -g pkg
        npm install
        pkg -t node14-mac package.json --out-path dist
    - name: Test pkg
      run: |
        chmod +x dist/cdxgen
        ./dist/cdxgen -v
        ./dist/cdxgen .
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset Mac
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cdxgen
        asset_name: cdxgen-mac
        asset_content_type: application/octet-stream

  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y python3.8 python3.8-dev python3-pip python3-testresources python3-setuptools patchelf desktop-file-utils libgdk-pixbuf2.0-dev
        # Install appimagetool AppImage
        sudo wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O /usr/local/bin/appimagetool
        sudo chmod +x /usr/local/bin/appimagetool
        sudo pip3 install appimage-builder
        mkdir -p appimage-builder-cache
        wget https://github.com/AppImage/AppImageKit/releases/download/12/runtime-x86_64 -O appimage-builder-cache/runtime-x86_64
    - name: Build AppImage
      run: |
        appimage-builder --recipe appimage-builder.yml --skip-test
      env:
        UPDATE_INFO: gh-releases-zsync|AppThreat|cdxgen|latest|*x86_64.AppImage.zsync
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cdxgen-latest-x86_64.AppImage
        asset_name: cdxgen.AppImage
        asset_content_type: application/octet-stream

